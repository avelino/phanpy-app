(ns phanpy.webview
  (:require ["dart:developer" :as dev]
            ["package:url_launcher/url_launcher.dart" :as launcher]
            ["package:webview_flutter/webview_flutter.dart" :as webview]
            ["package:webview_flutter_platform_interface/webview_flutter_platform_interface.dart" :as webview-interface]
            ["package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart" :as webview-ios]
            [cljd.flutter :as f]
            [clojure.string :as string]
            [phanpy.config :as config]
            [phanpy.permission :as permission]))

(defn ^:async custom-navigation-decision
  "navigation decision with business rule to handle URL outside phanpy"
  [url]
  (launcher/launch
   (Uri/parse url)
   .forceSafariVC true
   .universalLinksOnly true
   .forceWebView true)
  webview/NavigationDecision.prevent)

(defn load-url
  "webview construct in widget by receiving the URL that will be loaded"
  [url]
  (f/widget
   :let [ios (dart/is? webview-interface/WebViewPlatform.instance
                       webview-ios/WebKitWebViewPlatform)
         ;; you can customize parameters passed to the underlying platform ios/android
         params (if ios
                  (webview-ios/WebKitWebViewControllerCreationParams)
                  (webview/PlatformWebViewControllerCreationParams))]
   :managed [controller
             (doto (webview/WebViewController.fromPlatformCreationParams params)
               (.setJavaScriptMode webview/JavaScriptMode.unrestricted)
               (.enableZoom true)
               (.setUserAgent "PhanpyMobile")
               (as->
                cont
                (doto cont
                  (.setNavigationDelegate
                   (webview/NavigationDelegate
                    .onPageStarted (permission/photo-request)
                    .onWebResourceError
                    (fn [^webview/WebResourceError err]
                      (dev/log (str :phanpy-webview err)))
                    .onNavigationRequest
                    (fn [{for-main-frame .-isMainFrame
                          url .-url :as ^webview/NavigationRequest nav}]
                      (if (or (not for-main-frame)
                              (string/includes? url config/domain))
                        webview/NavigationDecision.navigate
                        (custom-navigation-decision url)))))))
               (cond-> ios
                 (-> ^webview-ios/WebKitWebViewController (.-platform)
                     ;; allow the user to return with gesture movement
                     (.setAllowsBackForwardNavigationGestures true)))
               (.loadRequest (Uri/parse url)))
             :dispose false]

   (webview/WebViewWidget .controller controller)))
